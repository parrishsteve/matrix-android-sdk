
apply plugin: 'com.android.library'

android {
    compileSdkVersion 25
    buildToolsVersion '26.0.2'

    packagingOptions {
        exclude 'LICENSE.txt'
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/NOTICE'
    }

    defaultConfig {
        minSdkVersion 21
        targetSdkVersion 21
        // use version to define a version code.
        versionCode 804
        version "0.8.04"
        versionName "0.8.04"
        resValue "string", "flavor_description", "SDKApp"
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
     }

    // prevent the "superClassName is empty" error for classes not annotated as tests
    tasks.withType(Test) {
        scanForTestClasses = false
        include "**/*Test.class" // whatever Ant pattern matches your test class files
    }

    signingConfigs {
        release {
            storeFile file(project.hasProperty("RELEASE_STORE_FILE") ? RELEASE_STORE_FILE : "/dummy/path")
            storePassword project.hasProperty("RELEASE_STORE_PASSWORD") ? RELEASE_STORE_PASSWORD : "dummy password"
            keyAlias project.hasProperty("RELEASE_KEY_ALIAS") ? RELEASE_KEY_ALIAS : "dummy alias"
            keyPassword project.hasProperty("RELEASE_KEY_PASSWORD") ? RELEASE_KEY_PASSWORD : "dummy password"
        }
    }

    android.libraryVariants.all { variant ->
        task("${variant.name}Docs", type: Javadoc) {
            source = variant.javaCompile.source
            classpath = files(((Object) android.bootClasspath.join(File.pathSeparator)))
            classpath += files(variant.javaCompile.classpath.files)

            destinationDir = file("../docs/javadoc/")
            delete "../docs/"

            options.windowTitle("Matrix Android SDK")
            options.docTitle("Matrix Android SDK")
            options.header("<b>Matrix Android SDK</b>")
            options.bottom("&copy; 2017 Vector Creations Ltd All rights reserved.")

            exclude '**/BuildConfig.java'
            exclude '**/R.java'
            failOnError false
        }
    }

    buildTypes {
        debug {
            resValue "string", "git_sdk_revision", "\"${gitRevision()}\""
            resValue "string", "git_sdk_revision_unix_date", "\"${gitRevisionUnixDate()}\""
            resValue "string", "git_sdk_revision_date", "\"${gitRevisionDate()}\""

            minifyEnabled false
        }

        release {
            resValue "string", "git_sdk_revision", "\"${gitRevision()}\""
            resValue "string", "git_sdk_revision_unix_date", "\"${gitRevisionUnixDate()}\""
            resValue "string", "git_sdk_revision_date", "\"${gitRevisionDate()}\""

            libraryVariants.all { variant ->
                variant.outputs.all { output ->
                    def outputFile = output.outputFile
                    if (outputFile != null && outputFile.name.endsWith('.aar')) {
                        def fileName = outputFile.name.replace(".aar", "-${version}.aar")
                        output.outputFileName = new File(outputFile.parent, fileName)
                    }
                }
            }
        }
    }


    lintOptions {
        disable 'InvalidPackage'
        disable 'MissingTranslation'
        disable 'RestrictedApi'
    }

    repositories {
        flatDir {
            dir 'libs'
        }
    }
}

def gitRevision() {
    def cmd = "git rev-parse --short HEAD"
    return cmd.execute().text.trim()
}

def gitRevisionUnixDate() {
    def cmd = "git show -s --format=%ct HEAD^{commit}"
    return cmd.execute().text.trim()
}

def gitRevisionDate() {
    def cmd = "git show -s --format=%ci HEAD^{commit}"
    return cmd.execute().text.trim()
}

dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])
    compile 'com.android.support:appcompat-v7:25.3.1'
    compile 'com.squareup.retrofit:retrofit:1.8.0'
    compile 'com.google.code.gson:gson:2.8.0'
    compile 'com.squareup.okhttp:okhttp-urlconnection:2.2.0'
    compile 'com.squareup.okhttp:okhttp:2.2.0'

    compile(name: 'olm-sdk', ext: 'aar')

    // replace the compile 'io.pristine:libjingle:9690@aar'
    compile(name: 'react-native-webrtc', ext: 'aar')

    // Robolectric
    testCompile 'com.android.support.test:runner:0.3'
    testCompile 'com.android.support.test:rules:0.3'
    testCompile 'org.mockito:mockito-core:1.+'
    testCompile 'junit:junit:4.12'
    testCompile 'org.hamcrest:hamcrest-library:1.3'
    testCompile 'org.apache.maven:maven-ant-tasks:2.1.3' // fixes issue on linux/mac
    testCompile('org.robolectric:robolectric:3.0') {
        exclude group: 'commons-logging', module: 'commons-logging'
        exclude group: 'org.apache.httpcomponents', module: 'httpclient'
    }

    testCompile 'junit:junit:4.12'
    androidTestCompile 'junit:junit:4.12'
    androidTestCompile 'com.android.support:support-annotations:23.3.0'
    androidTestCompile 'com.android.support.test:runner:0.5'
    androidTestCompile 'com.android.support.test:rules:0.5'
}
